<%= form_with(model: fmodel, html: {id: "form", class: "d-flex"}) do |form| %>

  <div id="left-panel" class="w-25 mw-25">
    
    <%# title text field %>
    <div class="field form-floating" >
      <%= form.text_field :title,
        :required => true,
        :placeholder => "Feature model title...",
        value: (session[:title].present? ? session[:title] : (fmodel.title if fmodel.title.present?)),
        class: "form-control mb-2"
      %>
      <%= form.label :title %>
    </div>

    <%# notes text field %>
    <div class="field form-floating">
      <%= form.text_area :notes,
        :placeholder => "Feature model notes...",
        value: (session[:notes].present? ? session[:notes] : (fmodel.notes if fmodel.notes.present?)),
        class: "form-control mb-2",
        style: "resize: none; height: 100%;"
      %>
      <%= form.label :notes %>
    </div>

    <%# make model visibility dropdown - !! invisible and set to public for guests !! %>
    <div class="field <%= "d-none" if !current_user.present? %>">
      <%= form.label :visibility, "Model Visibility" %>
      <%= form.select :visibility, {
        "Public" => "global",
        "Private" => "unlisted", 
        "Followers" => "followers"
        },
        { include_blank: false, selected: session[:visibility].presence || @fmodel&.visibility.presence || "global" },
        class: "form-select mb-2",
        disabled: !current_user.present?
        %>
    </div>

    <%# clean variables from session %>
    <% session.delete(:title) %>
    <% session.delete(:notes) %>
    <% session.delete(:visibility) %>
    <% session.delete(:graph_data) %>

    <%# hidden graph json text field %>
    <div>
      <%= form.label :graph, style: "display: none" %>
      <%= form.text_field :graph, style: "display: none" %>
    </div>

    <%# hidden userID text field %>
    <div>
      <%= form.label :created_by, style: "display: none" %>
      <%= form.text_field :created_by, style: "display: none" %>
    </div>

    <%# interaction buttons %>
    <div class="d-flex align-items-end">
      <div class="d-flex">
        <%# import %>
        <div>
          <button onclick="importModel()" type="button" class="btn btn-primary mr-2">Import</button>
        </div>

        <%# export %>
        <div>
          <button onclick="exportModel()" type="button" class="btn btn-primary">Export</button>
        </div>
      </div>

      <%# submit %>
      <% buttonText = controller.action_name == "edit" ? "Edit" : "Create" %>
      <%= form.submit buttonText, :class => 'btn btn-success ml-auto' %>
    </div>

    <%# show instructions to user %>
    <% if @instructions %>
      <hr class="">
      <h6>Instructions:</h6>
      <ul class="instruction-text">
        <li>Drag features from the palette to the right onto the canvas to place them in the diagram.</li>
        <li>Double click the feature to edit the text.</li>
        <li>Links can be drawn by highlighting over a node or from dragging a link from the palette.</li>
        <li>Right-click on links to toggle between mandatory and optional.</li>
        <li>Ctrl+Z and Ctrl+Y can be used to undo and redo.</li>

      </ul>
    <% end %>
  </div>
  <%# , class: "btn btn-outline-success" %>

  <div id="right-panel" class="w-75 ml-2 left-border">
    <div>
      <%= render "fmodel-graph", fmodel: @fmodel %>
    </div>
  </div>

  <script>
    function importModel() {
      let importedJson = prompt("Please input a valid JSON format", "");
      if (importedJson == "") {
        alert("No input detected, please try again.");
      } else {
        diagram.model = go.Model.fromJson(importedJson);
      }
    }

    function exportModel() {
      navigator.clipboard.writeText(diagram.model.toJson());

      alert("Copied model to clipboard!");
    }

    var form = document.getElementById('form');
    
    form.addEventListener('submit', function(event) {
      document.getElementById("fmodel_graph").value = diagram.model.toJson(); 

      if (document.getElementById("fmodel_graph").value === '{ "class": "GraphLinksModel",  "nodeDataArray": [],  "linkDataArray": []}') {
        event.preventDefault(); // prevents form being submitted if diagram blank
        alert("Please create a Feature Model using the diagram builder.");
      };
    });
  </script>
<% end %>
