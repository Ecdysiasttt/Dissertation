<!-- content -->
<%# sets the id to that in the database if given a model, else makes id blank %>
<% id = fmodel&.id.nil? ? "blank" : fmodel.id %>
<% graphJSON = fmodel&.graph.nil? ? "\"blank\"" : fmodel.graph %>

<% graphJSON = Rails.cache.read("graph_data") if Rails.cache.exist?("graph_data") %>


<div id="" class="d-inline-flex w-100">
  <div id="myPaletteDiv-<%= id %>"style="width: 20%; height: 500px;"></div>
  <div id="graphHolder-<%= id %>" style="width: 80%; height: 500px; background-color: #DAE4E4;"></div>
</div>
<%# <button id="SaveButton" onclick="save()" type="button">Save</button>
<button onclick="load()" type="button">Load</button> %>

<!-- dependencies -->

<!-- code -->
<script type="text/javascript">
  var $ = go.GraphObject.make;  // for conciseness in defining templates

  function toggleRequired(e, obj) {
    console.log("Toggle requirement status");
    diagram.commit(d => {
      // get the link data to which the Node is data bound
      var linkData = obj.part.data;

      if (linkData.arrowheadFill == "white") {
        // toggle to black (mandatory)
        d.model.set(linkData, "arrowheadFill", "black");
      } else {
        // toggle to white (optional)
        d.model.set(linkData, "arrowheadFill", "white");
      }
    }, "changed status");
  }

  function makeCTC(e, obj) {
    console.log("makeCTC clicked");
    diagram.commit(d => {
    // get the context menu that holds the button that was clicked
      var contextMenu = obj.part;
      // get the link data to which the Node is data bound
      var linkData = contextMenu.data;

      d.model.set(linkData, "arrowShape", "Standard");
      d.model.set(linkData, "dashed", [5,5]);
      d.model.set(linkData, "arrowheadFill", "black");
    }, "changed to CTC ");
  }

  function toggleCtcRequires(e, obj) {
    console.log("makeExcludes clicked");
    diagram.commit(d => {
    // get the context menu that holds the button that was clicked
      var contextMenu = obj.part;
      // get the link data to which the Node is data bound
      var linkData = contextMenu.data;

      if (linkData.fromArrowShape == "Backward") {
        // remove fromArrow head (requires)
        d.model.set(linkData, "fromArrowShape", "");
      } else {
        // add fromArrow head (excludes)
        d.model.set(linkData, "fromArrowShape", "Backward");
      }
    }, "toggled ctc requirement ");
  }

  function makeParental(e, obj) {
    console.log("Make mandatory clicked");
    diagram.commit(d => {
    // get the context menu that holds the button that was clicked
      var contextMenu = obj.part;
      // get the link data to which the Node is data bound
      var linkData = obj.part.data;

      d.model.set(linkData, "arrowheadFill", "black");
      d.model.set(linkData, "arrowShape", "Circle");
      d.model.set(linkData, "fromArrowShape", "");
      d.model.set(linkData, "dashed", [0,0]);
    }, "changed to parental ");
  }

  diagram =
    new go.Diagram("graphHolder-<%= id %>",  // must name or refer to the DIV HTML element
      {
        grid: $(go.Panel, "Grid",
          $(go.Shape, "LineH", { stroke: "lightgray", strokeWidth: 0.5 }),
          $(go.Shape, "LineH", { stroke: "gray", strokeWidth: 0.5, interval: 10 }),
          $(go.Shape, "LineV", { stroke: "lightgray", strokeWidth: 0.5 }),
          $(go.Shape, "LineV", { stroke: "gray", strokeWidth: 0.5, interval: 10 })
        ),
        "draggingTool.dragsLink": true,
        "draggingTool.isGridSnapEnabled": true,
        "linkingTool.isEnabled": false,
        // "linkingTool.isUnconnectedLinkValid": true,
        // "linkingTool.portGravity": 20,
        "relinkingTool.isUnconnectedLinkValid": true,
        "relinkingTool.portGravity": 20,
        "relinkingTool.fromHandleArchetype":
          $(go.Shape, "Diamond", { segmentIndex: 0, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "tomato", stroke: "darkred" }),
        "relinkingTool.toHandleArchetype":
          $(go.Shape, "Diamond", { segmentIndex: -1, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "darkred", stroke: "tomato" }),
        "linkReshapingTool.handleArchetype":
          $(go.Shape, "Diamond", { desiredSize: new go.Size(7, 7), fill: "lightblue", stroke: "deepskyblue" }),
        "undoManager.isEnabled": true
      });

  // Define a function for creating a "port" that is normally transparent.
  // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
  // and where the port is positioned on the node, and the boolean "output" and "input" arguments
  // control whether the user can draw links from or to the port.
  function makePort(name, spot, output, input) {
    // the port is basically just a small transparent circle
    return $(go.Shape, "Circle",
      {
        fill: null,  // not seen, by default; set to a translucent gray by showSmallPorts, defined below
        stroke: null,
        desiredSize: new go.Size(7, 7),
        alignment: spot,  // align the port on the main Shape
        alignmentFocus: spot,  // just inside the Shape
        portId: name,  // declare this object to be a "port"
        fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
        fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
        cursor: "pointer"  // show a different cursor to indicate potential link point
      });
  }

  var nodeSelectionAdornmentTemplate =
    $(go.Adornment, "Auto",
      $(go.Shape, { fill: null, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] }),
      $(go.Placeholder)
    );

  var nodeResizeAdornmentTemplate =
    $(go.Adornment, "Spot",
      { locationSpot: go.Spot.Right },
      $(go.Placeholder),
      $(go.Shape, { alignment: go.Spot.TopLeft, cursor: "nw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Top, cursor: "n-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.TopRight, cursor: "ne-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

      $(go.Shape, { alignment: go.Spot.Left, cursor: "w-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Right, cursor: "e-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

      $(go.Shape, { alignment: go.Spot.BottomLeft, cursor: "se-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Bottom, cursor: "s-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.BottomRight, cursor: "sw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" })
    );

  diagram.nodeTemplate =
    $(go.Node, "Spot",
      { locationSpot: go.Spot.Center },
      new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
      { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate },
      { resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate },
      new go.Binding("angle").makeTwoWay(),
      // the main object is a Panel that surrounds a TextBlock with a Shape
      $(go.Panel, "Auto",
        { name: "PANEL" },
        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
        $(go.Shape, "Rectangle",  // default figure
          {
            fromLinkable: true, toLinkable: true, cursor: "pointer",
            fromLinkableDuplicates: false, toLinkableDuplicates: false,
            fill: "white",  // default color
            strokeWidth: 2
            // toMaxLinks: 1
          },
          new go.Binding("figure"),
          new go.Binding("fill")),
        $(go.TextBlock,
          {
            font: "bold 10pt Helvetica, Arial, sans-serif",
            margin: 8,
            maxSize: new go.Size(160, NaN),
            wrap: go.TextBlock.WrapFit,
            editable: true
          },
          new go.Binding("text").makeTwoWay())
      ),
      // four small named ports, one on each side:
      makePort('L', go.Spot.Left, true, true),
      makePort('R', go.Spot.Right, true, true),
      makePort("T", go.Spot.Top, true, true),
      makePort("B", go.Spot.Bottom, true, true),
      { // handle mouse enter/leave events to show/hide the ports
        mouseEnter: (e, node) => showSmallPorts(node, true),
        mouseLeave: (e, node) => showSmallPorts(node, false)
      }
    );

  function showSmallPorts(node, show) {
    node.ports.each(port => {
      if (port.portId !== "") {  // don't change the default port, which is the big shape
        port.fill = show ? "rgba(0,0,0,.3)" : null;
      }
    });
  }

  var linkSelectionAdornmentTemplate =
    $(go.Adornment, "Link",
      $(go.Shape,
        // isPanelMain declares that this Shape shares the Link.geometry
        { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 2 })  // use selection object's strokeWidth
    );

  

  diagram.linkTemplate =
    $(go.Link,  // the whole link panel
      { selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate },
      { relinkableFrom: true, relinkableTo: true, reshapable: true },
      {
        // routing: go.Link.AvoidsNodes,
        // curve: go.Link.JumpOver,
        // corner: 5,
        toShortLength: 4
      },
      new go.Binding("points").makeTwoWay(),
      $(go.Shape, { isPanelMain: true, stroke: "transparent", strokeWidth: 8 }), // thick undrawn path
      $(go.Shape,  // the link path shape
        { isPanelMain: true, strokeWidth: 2, strokeDashArray: [0,0]},
        new go.Binding("strokeDashArray", "dashed")),
      $(go.Shape, { toArrow: "Circle", fill: "black"},
        new go.Binding("fill", "arrowheadFill"),
        new go.Binding("toArrow", "arrowShape")),
      $(go.Shape, { fromArrow: "", fill: ""},
        new go.Binding("fromArrow", "fromArrowShape")),
      {
        contextMenu:     // define a context menu for each node
          $("ContextMenu",  // that has one button
            $("ContextMenuButton",
              {"ButtonBorder.fill": "white", "_buttonFillOver": "skyblue"},
              $(go.TextBlock, "Toggle requirement status"),
              { click: toggleRequired },
              new go.Binding("visible", "", (data) => data.arrowShape === "Circle")),
            $("ContextMenuButton",
              { "ButtonBorder.fill": "white", "_buttonFillOver": "skyblue" },
              $(go.TextBlock, "Toggle required/excludes"),
              { click: toggleCtcRequires },
              new go.Binding("visible", "", (data) => data.arrowShape === "Standard")),
            $("ContextMenuButton",
              {"ButtonBorder.fill": "white", "_buttonFillOver": "skyblue"},
              $(go.TextBlock, "Make CTC"),
              { click: makeCTC },
              new go.Binding("visible", "", (data) => data.arrowShape === "Circle")),
            $("ContextMenuButton",
              { "ButtonBorder.fill": "white", "_buttonFillOver": "skyblue" },
              $(go.TextBlock, "Make parental relationship"),
              { click: makeParental },
              new go.Binding("visible", "", (data) => data.arrowShape === "Standard")),
            // $("ContextMenuButton",
            //   { "ButtonBorder.fill": "white", "_buttonFillOver": "skyblue" },
            //   $(go.TextBlock, "Make requires"),
            //   { click: makeRequires },
            //   new go.Binding("visible", "", (data) => data.arrowShape === "Standard"))
            // more ContextMenuButtons would go here
          )  // end Adornment
      }, {
        // a mouse-over highlights the link by changing the first main path shape's stroke:
        mouseEnter: (e, link) => link.elt(0).stroke = "rgba(0,90,156,0.3)",
        mouseLeave: (e, link) => link.elt(0).stroke = "transparent"
      }

  );  

  // also define a context menu for the diagram's background
  diagram.contextMenu =
    $("ContextMenu",
      $("ContextMenuButton",
        $(go.TextBlock, "Undo"),
        { click: (e, obj) => e.diagram.commandHandler.undo() },
        new go.Binding("visible", "", o => o.diagram.commandHandler.canUndo()).ofObject()),
      $("ContextMenuButton",
        $(go.TextBlock, "Redo"),
        { click: (e, obj) => e.diagram.commandHandler.redo() },
        new go.Binding("visible", "", o => o.diagram.commandHandler.canRedo()).ofObject()),
      // no binding, always visible button:
      $("ContextMenuButton",
        $(go.TextBlock, "New Node"),
        { click: (e, obj) => {
          e.diagram.commit(d => {
            var data = { text: "Feature", "size":"120 45"};
            d.model.addNodeData(data);
            part = d.findPartForData(data);  // must be same data reference, not a new {}
            // set location to saved mouseDownPoint in ContextMenuTool
            part.location = d.toolManager.contextMenuTool.mouseDownPoint;
          }, 'new node');
        } })
    );

  // check for exisiting before creating pallette
  // pallette should show on new and edit pages

  var showPalette = true;

  //  if model exists, we're on edit or show pages
  <% if graphJSON != "\"blank\"" %>
    // console.log("Model exists. ID: <%= id %>");

    // load existing model
    var graph = <%=raw graphJSON %>
    diagram.model = go.Model.fromJson(graph);
    <% Rails.cache.delete('graph_data') %>
    console.log("Model loaded from DB, checking path...");

    diagram.zoomToFit();

    // if on show path, make diagram max width, hide pallette, and make
    // read-only
    <% if current_page?(fmodel_path(id)) %>
      console.log("On show path");

      showPalette = false;      

      var graphHolder = document.getElementById("graphHolder-<%= id %>");
      var paletteHolder = document.getElementById("myPaletteDiv-<%= id %>");
      
      // make pointer events none
      graphHolder.style["pointer-events"] = "none";
      
      if (graph) {
        console.log("loading <%= @fmodel.title %> from db...");
        // adjust panel widths

        graphHolder.style["width"] = "100%";
        paletteHolder.style["width"] = "0%";

        // diagram.model = go.Model.fromJson(@fmodel.graph);
        diagram.isReadOnly = true;
      } else {
        console.log("Error in loading graph.");
        graphHolder.remove();
        paletteHolder.remove();

        var error = document.createElement("p");
        paragraph.textContent = "There has been an unexpected erorr in loading the diagram. Please contact a site administrator";

        var parent = document.getElementById("right-panel");

        parent.appendChild(error);
      }
    // only other path is edit. no changes needed since graph has already been loaded.
    <% end %>
  <% end %>

  if (showPalette) {
    myPalette =
      new go.Palette("myPaletteDiv-<%= id %>",  // must name or refer to the DIV HTML element
        {
          maxSelectionCount: 1,
          nodeTemplateMap: diagram.nodeTemplateMap,  // share the templates used by diagram
          linkTemplate: // simplify the link template, just in this Palette
            $(go.Link,  // the whole link panel
              { locationSpot: go.Spot.Center, selectionAdornmentTemplate: linkSelectionAdornmentTemplate },
              { relinkableFrom: true, relinkableTo: true, reshapable: true },
              {
                // routing: go.Link.AvoidsNodes,
                // curve: go.Link.JumpOver,
                // corner: 5,
                toShortLength: 4
              },
              new go.Binding("points").makeTwoWay(),
              $(go.Shape,  // the link path shape
                { isPanelMain: true, strokeWidth: 2, strokeDashArray: [0,0]},
                new go.Binding("strokeDashArray", "dashed")),
              $(go.Shape, { toArrow: "Circle", fill: "black"},
                new go.Binding("fill", "arrowheadFill"),
                new go.Binding("toArrow", "arrowShape")),
              $(go.Shape, { fromArrow: "", fill: ""},
                new go.Binding("fromArrow", "fromArrowShape"))
            ),
            // $(go.Link,
            //   { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
            //     // to line up the Link in the same manner we have to pretend the Link has the same location spot
            //     locationSpot: go.Spot.Center,
            //     selectionAdornmentTemplate:
            //       $(go.Adornment, "Link",
            //         { locationSpot: go.Spot.Center },
            //         $(go.Shape,  // the link path shape
            //           { isPanelMain: true, strokeWidth: 2, strokeDashArray: [0,0]},
            //           new go.Binding("strokeDashArray", "dashed")),
            //         $(go.Shape, { toArrow: "Circle", fill: "black"},
            //           new go.Binding("fill", "arrowheadFill"),
            //           new go.Binding("toArrow", "arrowShape"))
            //       )
            //   },
            //   {
            //     // routing: go.Link.AvoidsNodes,
            //     // curve: go.Link.JumpOver,
            //     // corner: 5,
            //     toShortLength: 4
            //   },
            //   new go.Binding("points"),
            //   $(go.Shape,  // the link path shape
            //     { isPanelMain: true, strokeWidth: 2 })
            //   // $(go.Shape,  // the arrowhead
            //   //   { toArrow: "Circle", stroke: null })
            // ),
          model: new go.GraphLinksModel(
            // specify the contents of the Palette
            [ { text: "Feature", "size":"120 45"} ],
            [{ // the Palette also has a disconnected Link, which the user can drag-and-drop
                arrowShape: "Circle",
                arrowheadFill: "black",
                points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(80, 0)])
              }, { 
                arrowShape: "Circle",
                arrowheadFill: "white",
                points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(80, 0)])
              },
               { 
                arrowShape: "Standard",
                arrowheadFill: "Black",
                dashed: [5,5],
                points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(80, 0)])
              },
              { 
                arrowShape: "Standard",
                arrowheadFill: "Black",
                dashed: [5,5],
                fromArrowShape: "Backward",
                points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(80, 0)])
              }
            ])
    });
  }
</script>