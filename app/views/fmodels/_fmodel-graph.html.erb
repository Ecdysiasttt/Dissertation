<!-- content -->
<%# sets the id to that in the database if given a model, else makes id blank %>
<% id = defined?(fmodel_id) ? fmodel_id : "blank" %>
<% graphJSON = defined?(fmodel_graph) ? fmodel_graph.html_safe : "\"blank\"" %>

<div id="" class="d-inline-flex w-100">
  <div id="myPaletteDiv-<%= id %>"style="width: 20%; height: 500px;"></div>
  <div id="graphHolder-<%= id %>" style="width: 80%; height: 500px; background-color: #DAE4E4;"></div>
</div>
<%# <button id="SaveButton" onclick="save()" type="button">Save</button>
<button onclick="load()" type="button">Load</button> %>

<!-- dependencies -->
<script src="https://cdn.jsdelivr.net/npm/gojs/release/go.js"></script>

<!-- code -->
<script type="text/javascript">
  var $ = go.GraphObject.make;  // for conciseness in defining templates
  
  function makeOptional(e, obj) {
    console.log("Make optional clicked");
    diagram.commit(d => {
    // get the context menu that holds the button that was clicked
      var contextMenu = obj.part;
      // get the link data to which the Node is data bound
      var linkData = contextMenu.data;

      d.model.set(linkData, "arrowheadFill", "white");
    }, "changed to optional");
  }

  function makeMandatory(e, obj) {
    console.log("Make optional clicked");
    diagram.commit(d => {
    // get the context menu that holds the button that was clicked
      var contextMenu = obj.part;
      // get the link data to which the Node is data bound
      var linkData = contextMenu.data;

      d.model.set(linkData, "arrowheadFill", "black");
    }, "changed to mandatory  ");
  }


  diagram =
    new go.Diagram("graphHolder-<%= id %>",  // must name or refer to the DIV HTML element
      {
        grid: $(go.Panel, "Grid",
          $(go.Shape, "LineH", { stroke: "lightgray", strokeWidth: 0.5 }),
          $(go.Shape, "LineH", { stroke: "gray", strokeWidth: 0.5, interval: 10 }),
          $(go.Shape, "LineV", { stroke: "lightgray", strokeWidth: 0.5 }),
          $(go.Shape, "LineV", { stroke: "gray", strokeWidth: 0.5, interval: 10 })
        ),
        "draggingTool.dragsLink": true,
        "draggingTool.isGridSnapEnabled": true,
        "linkingTool.isUnconnectedLinkValid": true,
        "linkingTool.portGravity": 20,
        "relinkingTool.isUnconnectedLinkValid": true,
        "relinkingTool.portGravity": 20,
        "relinkingTool.fromHandleArchetype":
          $(go.Shape, "Diamond", { segmentIndex: 0, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "tomato", stroke: "darkred" }),
        "relinkingTool.toHandleArchetype":
          $(go.Shape, "Diamond", { segmentIndex: -1, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "darkred", stroke: "tomato" }),
        "linkReshapingTool.handleArchetype":
          $(go.Shape, "Diamond", { desiredSize: new go.Size(7, 7), fill: "lightblue", stroke: "deepskyblue" }),
        "undoManager.isEnabled": true
      });

  // Define a function for creating a "port" that is normally transparent.
  // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
  // and where the port is positioned on the node, and the boolean "output" and "input" arguments
  // control whether the user can draw links from or to the port.
  function makePort(name, spot, output, input) {
    // the port is basically just a small transparent circle
    return $(go.Shape, "Circle",
      {
        fill: null,  // not seen, by default; set to a translucent gray by showSmallPorts, defined below
        stroke: null,
        desiredSize: new go.Size(7, 7),
        alignment: spot,  // align the port on the main Shape
        alignmentFocus: spot,  // just inside the Shape
        portId: name,  // declare this object to be a "port"
        fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
        fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
        cursor: "pointer"  // show a different cursor to indicate potential link point
      });
  }

  var nodeSelectionAdornmentTemplate =
    $(go.Adornment, "Auto",
      $(go.Shape, { fill: null, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] }),
      $(go.Placeholder)
    );

  var nodeResizeAdornmentTemplate =
    $(go.Adornment, "Spot",
      { locationSpot: go.Spot.Right },
      $(go.Placeholder),
      $(go.Shape, { alignment: go.Spot.TopLeft, cursor: "nw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Top, cursor: "n-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.TopRight, cursor: "ne-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

      $(go.Shape, { alignment: go.Spot.Left, cursor: "w-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Right, cursor: "e-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

      $(go.Shape, { alignment: go.Spot.BottomLeft, cursor: "se-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.Bottom, cursor: "s-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
      $(go.Shape, { alignment: go.Spot.BottomRight, cursor: "sw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" })
    );

  diagram.nodeTemplate =
    $(go.Node, "Spot",
      { locationSpot: go.Spot.Center },
      new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
      { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate },
      { resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate },
      new go.Binding("angle").makeTwoWay(),
      // the main object is a Panel that surrounds a TextBlock with a Shape
      $(go.Panel, "Auto",
        { name: "PANEL" },
        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
        $(go.Shape, "Rectangle",  // default figure
          {
            portId: "", // the default port: if no spot on link data, use closest side
            fromLinkable: true, toLinkable: true, cursor: "pointer",
            fromLinkableDuplicates: false, toLinkableDuplicates: false,
            fill: "white",  // default color
            strokeWidth: 2,
            toMaxLinks: 1
          },
          new go.Binding("figure"),
          new go.Binding("fill")),
        $(go.TextBlock,
          {
            font: "bold 10pt Helvetica, Arial, sans-serif",
            margin: 8,
            maxSize: new go.Size(160, NaN),
            wrap: go.TextBlock.WrapFit,
            editable: true
          },
          new go.Binding("text").makeTwoWay())
      ),
      // four small named ports, one on each side:
      makePort("T", go.Spot.Top, false, true),
      makePort("B", go.Spot.Bottom, true, false),
      { // handle mouse enter/leave events to show/hide the ports
        mouseEnter: (e, node) => showSmallPorts(node, true),
        mouseLeave: (e, node) => showSmallPorts(node, false)
      }
    );

  function showSmallPorts(node, show) {
    node.ports.each(port => {
      if (port.portId !== "") {  // don't change the default port, which is the big shape
        port.fill = show ? "rgba(0,0,0,.3)" : null;
      }
    });
  }

  var linkSelectionAdornmentTemplate =
    $(go.Adornment, "Link",
      $(go.Shape,
        // isPanelMain declares that this Shape shares the Link.geometry
        { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 })  // use selection object's strokeWidth
    );

  

  diagram.linkTemplate =
    $(go.Link,  // the whole link panel
      { selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate },
      { relinkableFrom: true, relinkableTo: true, reshapable: true },
      {
        // routing: go.Link.AvoidsNodes,
        // curve: go.Link.JumpOver,
        // corner: 5,
        toShortLength: 4
      },
      new go.Binding("points").makeTwoWay(),
      $(go.Shape,  // the link path shape
        { isPanelMain: true, strokeWidth: 2 }),
      $(go.Shape, { toArrow: "Circle", fill: "black"},
        new go.Binding("fill", "arrowheadFill")),
      {
        contextMenu:     // define a context menu for each node
          $("ContextMenu",  // that has one button
            $("ContextMenuButton",
              {
                "ButtonBorder.fill": "white",
                "_buttonFillOver": "skyblue"
              },
              $(go.TextBlock, "Make optional"),
              { click: makeOptional }),
            $("ContextMenuButton",
              {
                "ButtonBorder.fill": "white",
                "_buttonFillOver": "skyblue"
              },
              $(go.TextBlock, "Make mandatory"),
              { click: makeMandatory })
            // more ContextMenuButtons would go here
          )  // end Adornment
      }
  );

// also define a context menu for the diagram's background
diagram.contextMenu =
  $("ContextMenu",
    $("ContextMenuButton",
      $(go.TextBlock, "Undo"),
      { click: (e, obj) => e.diagram.commandHandler.undo() },
      new go.Binding("visible", "", o => o.diagram.commandHandler.canUndo()).ofObject()),
    $("ContextMenuButton",
      $(go.TextBlock, "Redo"),
      { click: (e, obj) => e.diagram.commandHandler.redo() },
      new go.Binding("visible", "", o => o.diagram.commandHandler.canRedo()).ofObject()),
    // no binding, always visible button:
    $("ContextMenuButton",
      $(go.TextBlock, "New Node"),
      { click: (e, obj) => {
        e.diagram.commit(d => {
          var data = {};
          d.model.addNodeData(data);
          part = d.findPartForData(data);  // must be same data reference, not a new {}
          // set location to saved mouseDownPoint in ContextMenuTool
          part.location = d.toolManager.contextMenuTool.mouseDownPoint;
        }, 'new node');
      } })
  );

  // check for exisiting before creating pallette

  var graph = <%=raw graphJSON %>;

  if (graph != "blank") {
    console.log("loading from db...");
    // adjust panel widths

    var graphHolder = document.getElementById("graphHolder-<%= id %>");
    var paletteHolder = document.getElementById("myPaletteDiv-<%= id %>");

    graphHolder.style["width"] = "100%";
    paletteHolder.style["width"] = "0%";

    diagram.model = go.Model.fromJson(graph);
    diagram.isEnabled = false;
  } else {
    // initialize the Palette that is on the left side of the page
    myPalette =
      new go.Palette("myPaletteDiv-<%= id %>",  // must name or refer to the DIV HTML element
        {
          maxSelectionCount: 1,
          nodeTemplateMap: diagram.nodeTemplateMap,  // share the templates used by diagram
          linkTemplate: // simplify the link template, just in this Palette
            $(go.Link,
              { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
                // to line up the Link in the same manner we have to pretend the Link has the same location spot
                locationSpot: go.Spot.Center,
                selectionAdornmentTemplate:
                  $(go.Adornment, "Link",
                    { locationSpot: go.Spot.Center },
                    $(go.Shape,
                      { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 }),
                    $(go.Shape,  // the arrowhead
                      { toArrow: "Circle", fill: "black" })
                  )
              },
              {
                // routing: go.Link.AvoidsNodes,
                // curve: go.Link.JumpOver,
                // corner: 5,
                toShortLength: 4
              },
              new go.Binding("points"),
              $(go.Shape,  // the link path shape
                { isPanelMain: true, strokeWidth: 2 }),
              $(go.Shape,  // the arrowhead
                { toArrow: "Circle", stroke: null })
            ),
          $(go.Link,
              { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
                // to line up the Link in the same manner we have to pretend the Link has the same location spot
                locationSpot: go.Spot.Center,
                selectionAdornmentTemplate:
                  $(go.Adornment, "Link",
                    { locationSpot: go.Spot.Center },
                    $(go.Shape,
                      { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 }),
                    $(go.Shape,  // the arrowhead
                      { toArrow: "Circle", fill: "black" })
                  )
              },
              {
                // routing: go.Link.AvoidsNodes,
                // curve: go.Link.JumpOver,
                // corner: 5,
                toShortLength: 4
              },
              new go.Binding("points"),
              $(go.Shape,  // the link path shape
                { isPanelMain: true, strokeWidth: 2 }),
              $(go.Shape,  // the arrowhead
                { toArrow: "Circle", stroke: null })
            ),
          model: new go.GraphLinksModel([  // specify the contents of the Palette
            { text: "Feature", "size":"120 45"},
          ], [
              // the Palette also has a disconnected Link, which the user can drag-and-drop
              { points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(60, 0)]) }
            ])
        });
  }
</script>