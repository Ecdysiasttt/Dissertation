<script>
  // fixes the duplicate headers on the features table by
  // iterating through, checking for duplicates. adjusts
  // rowspan/colspan accordingly.
  function fixTable() {
    console.log("Fixing table...");
    var tableHeader = document.getElementById('header');

    var uniqueHeaders = [];
    var uniqueHeaderText = [];
    var duplicateHeaders = [];

    // iterate through all headers to find duplicates
    for (var row of tableHeader.children) {
      var allHeaders = row.children;
      var referenceHeader = allHeaders[0];

      for (var th of allHeaders) {
        // if header already present in table, add to duplicates and hide
        // else add to unique
        if (uniqueHeaderText.includes(th.innerHTML)) {
          duplicateHeaders.push(th);
          th.style.display = "none";
        } else {
          uniqueHeaders.push(th);
          uniqueHeaderText.push(th.innerHTML);
        }
      }
    }

    // iterate through unique headers and compare against dupes to determine
    // rowspan and colspan
    for (var h of uniqueHeaders) {
      var [uniqueName, uniqueRowId] = [h.id.split("-")[0], h.id.split("-")[1] ];
      var [colspan, rowspan] = [1, 1];

      for (var duplicate of duplicateHeaders) {
        var [duplicateName, duplicateRowId] = [duplicate.id.split("-")[0], duplicate.id.split("-")[1]];

        // if name AND rowId match, on same row - increment colspan
        // if name matches but rowId doesn't, on different row - increment rowspan
        if (uniqueName == duplicateName) {
          if (uniqueRowId == duplicateRowId) {
            colspan ++;
          } else {
            rowspan ++;
          }
        }
      }

      h.colSpan = colspan;
      h.rowSpan = rowspan;

     // centre if colspan is greater than 1
      if (colspan > 1) {
        h.style.textAlign = "center";
      }
    }

    // finally remove all duplicate headers
    for (var th of duplicateHeaders) {
      th.remove();
    }
  }

</script>

<div class="w-100">
  <div>
    <div id="info" style="display: block;">
      <%# display analysis %>
      <div class="d-flex">
        <div id="left-panel-info" class="w-25 mw-25">
          <hr class="">
          <div id="edit-info">
            <p class="mb-1"><strong>Title:</strong> <%= @fmodel.title %></p>
            <% if @fmodel.canModify %>
              <p class="mb-1"><strong>Visibility:</strong> <%= @fmodel.getVisibility %></p>
            <% end %>
            <p class="mb-1"><strong>Author:</strong> <%= @fmodel.getCreator %></p>
            <p class="mb-1"><strong>Created:</strong> <%= formatTime(@fmodel.created_at) %></p>
            <p class="mb-1"><strong>Last updated:</strong> <%= formatTime(@fmodel.updated_at) %></p>
            <% if @fmodel.notes.present? %>
              <p class="mb-1"><strong>Notes:</strong></p>
              <p class="mb-1"><%= @fmodel.notes %></p>
            <% end %>
            <div class="d-flex justify-content-between mt-3">
              <div class="d-flex">

                <div class="dropdown mr-2">
                  <button class="btn btn-success dropdown-toggle" type="button" title="Save options"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-download"></i>
                  </button>
                  <ul class="dropdown-menu">
                    <li>
                      <button type="button"  onclick="saveSvg()" id="save-image"
                        class="dropdown-item btn btn-success">
                        <i class="bi bi-filetype-svg"></i> SVG
                      </button>
                    </li>
                    <li>
                      <button type="button"  onclick="saveJpeg()" id="save-jpeg"
                        class="dropdown-item btn btn-success">
                        <i class="bi bi-image"></i> JPEG
                      </button>
                    </li> 
                    <li>
                      <button type="button"  onclick="saveJson()" id="save-json"
                        class="dropdown-item btn btn-success">
                        <i class="bi bi-braces"></i> JSON
                      </button>
                    </li>                
                  </ul>
                </div>

                <%# save as image button %>
                <%# <button type="button"  onclick="saveImage()" id="save-image"
                  class="btn btn-success btn-small mr-2" title="Save as image">
                  <i class="bi bi-image"></i>
                </button> %>
                <% if @fmodel.canModify %>
                <%= button_to(edit_fmodel_path(@fmodel), method: :get,
                      class: "btn btn-warning btn-small", title: "Edit") do %>
                    <i class="bi bi-pencil"></i>
                  <% end %>
                <% end %>
              </div>
              <% if @fmodel.canModify %>
                <div>
                  <%= button_to(@fmodel, method: :delete,
                      class: "btn btn-danger btn-small", title: "Delete") do %>
                    <i class="bi bi-x-lg"></i>
                  <% end %>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <%# show graph %>
        <div id="right-panel-info" class="w-75 ml-2 left-border">
          <%= render @fmodel %>
        </div>
      </div>
    </div>

    <div id="analysis" style="display: none;">
      <div class="d-flex">
        <div id="left-panel-analysis" class="w-25 mw-25">
          <hr>
          <h5>Analysis:</h5>
          <ul>
            <li id="numFeatures">
              <ul>
                <li id="numOptional"></li>
                <li id="numMandatory"></li>
                <li id="numAlternative"></li>
                <li id="numOr"></li>
                <li id="numConstraints"></li>
              </ul>
            </li>
            <li id="depth">Depth:</li>
            <li id="validConfigs"> valid configurations</li>
            <li id="coreFeatures"> Core features:</li>
            <li id="voidFeatures"> Dead features:</li>
          </ul>
        </div>

        <div id="right-panel-analysis" class="w-75 ml-2 pl-3 left-border restrict-height overflow-auto">
          <table class="table table-sm table-border border-dark overflow-auto">
            <thead id="header" class="sticky-top">
              <tr id="headerRow">
              </tr>
            </thead>
            <tbody id="body">
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Function to make AJAX request to fetch analysis results
    function fetchAnalysisResults() {
      const xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.analysis_complete) {
              // Update the frontend with analysis results
              updateAnalysisUI(response);
            } else {
              // If analysis is not complete, continue polling
              setTimeout(fetchAnalysisResults, 1000); // Poll again after 1 second
            }
          } else {
            console.error('Error:', xhr.statusText); // Handle error response
          }
        }
      };

      // Replace :id with the actual ID of the Fmodel
      const fmodelId = 1; // Assuming Fmodel ID is known
      xhr.open('GET', `/fmodels/<%= @fmodel.id %>/analysis`);
      console.log("sending AJAX request to /fmodels/<%= @fmodel.id %>/analysis")
      xhr.send();
    }

    fetchAnalysisResults();

    // Function to update the frontend with analysis results
    function updateAnalysisUI(response) {
      // Update features
      const numFeatures = document.getElementById('numFeatures');
      numFeatures.firstChild.textContent = response.num_features + ' features:';
      document.getElementById('numOptional').textContent = response.num_optional + ' optional';
      document.getElementById('numMandatory').textContent = response.num_mandatory + ' mandatory';
      document.getElementById('numAlternative').textContent = response.num_alternative + ' alternative';
      document.getElementById('numOr').textContent = response.num_or + ' or';
      document.getElementById('numConstraints').textContent = response.num_constraints + ' constraints';
      
      // Update depth
      document.getElementById('depth').textContent = 'Depth: ' + response.depth;
      
      // Update valid configurations
      document.getElementById('validConfigs').textContent = response.valid_configs_size + ' valid configurations';

      // Update core features
      const coreFeaturesList = document.getElementById('coreFeatures');
      if (response.core_features.length > 0) {
        const child = document.createElement('ul');
        coreFeaturesList.appendChild(child);
        response.core_features.forEach(feature => {
          const listItem = document.createElement('li');
          listItem.textContent = feature.name; // Access the 'name' attribute
          child.appendChild(listItem);
        });
      } else {
        coreFeaturesList.textContent = '0 core features.';
      }

      // Update void features
      const voidFeaturesList = document.getElementById('voidFeatures');
      if (response.void_features.length > 0) {
        // add a li element under the header to append void children to
        const child = document.createElement('ul');
        voidFeaturesList.appendChild(child);
        response.void_features.forEach(feature => {
          const listItem = document.createElement('li');
          listItem.textContent = feature.name; // Access the 'name' attribute
          child.appendChild(listItem);
        });
      } else {
        voidFeaturesList.textContent = '0 dead features.';
      }

      // Update table headers
      const headerTable = document.getElementById('header');
      headerTable.innerHTML = ''; // Clear existing content

      if (response.table_headers.length === 0) {
        // If there are no valid configurations, display a message
        const noConfigTh = document.createElement('th');
        noConfigTh.classList.add('text-center');
        noConfigTh.textContent = 'No valid configurations for this model.';
        const noConfigTr = document.createElement('tr');
        noConfigTr.appendChild(noConfigTh);
        headerTable.appendChild(noConfigTr);
      } else {
        for (var i = 0; i < response.depth; i++) {
          var tr = document.createElement('tr');
          for (var j = 0; j < response.table_headers.length; j++) {
            feature = response.table_headers[j][i];
            var th = document.createElement('th');
            th.id = feature.name + "&" + feature.id + "-" + i;
            th.textContent = feature.name;
            tr.appendChild(th);
          }
          headerTable.appendChild(tr);
        }
      }

      fixTable();

      // Update table body
      const body = document.getElementById('body');
      body.innerHTML = '';
      response.configs.forEach(row => {
        const tr = document.createElement('tr');
        row.forEach(selected => {
          const td = document.createElement('td');
          td.textContent = selected === 1 ? '✓' : '';
          tr.appendChild(td);
        });
        body.appendChild(tr);
      });

      var button = document.getElementById('analysis-button');
      button.innerHTML = "Show Analysis";
      button.disabled = false;
    }

    function swapPanel() {
      var infoPanel = document.getElementById('info');
      var analysisPanel = document.getElementById('analysis');
      var button = document.getElementById('analysis-button');
      console.log(button);

      if (infoPanel.style.display == "block") {
        console.log("Info visible. Hiding...");
        infoPanel.style.display = "none";
        button.innerHTML = "Show Info";
      } else {
        console.log("Info not visible. Showing...");
        infoPanel.style.display = "block";
        button.innerHTML = "Show Analysis";
      }

      if (analysisPanel.style.display == "block") {
        console.log("Analysis visible. Hiding...");
        analysisPanel.style.display = "none";
        button.innerHTML = "Show Analysis";
      } else {
        console.log("Analysis not visible. Showing...");
        analysisPanel.style.display = "block";
        button.innerHTML = "Show Info";
      }
    }

    function saveSvg() {
      var svg = diagram.makeSvg({ scale: 1, background: "white"});
      var svsstr = new XMLSerializer().serializeToString(svg);
      var blob = new Blob([svsstr], {type: "image/svg+xml"});
      var filename = '<%= @fmodel.title %>.svg';
      downloadCallback(blob, filename);
      console.log("SVG saved!");
    }

    function downloadCallback(blob, filename) {
      var url = window.URL.createObjectURL(blob);

      var a = document.createElement('a');
      a.style = 'display: none';
      a.href = url;
      a.download = filename;

      // IE 11
      if (window.navigator.msSaveBlob !== undefined) {
        window.navigator.msSaveBlob(blob, filename);
        return;
      }

      document.body.appendChild(a);
      requestAnimationFrame(() => {
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      });
    }

    function saveJpeg() {
      var filename = '<%= @fmodel.title %>.jpeg';
      var blob = diagram.makeImageData({
        scale: 1,
        background: "white",
        returnType: "blob",
        callback: function(blob) {
          downloadCallback(blob, filename);
        }
      });
      
    }

    function saveJson() {
      navigator.clipboard.writeText(diagram.model.toJson());
      alert("Copied model to clipboard!");
    }
  </script>
</div>
